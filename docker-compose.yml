version: '3.7'

networks:
  proxy:
    external: true
  internal:
    driver: bridge

services:

  whoami:
    container_name: whoami
    image: containous/whoami
    restart: unless-stopped
    networks:
      - internal
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.entrypoints=https
      - traefik.http.routers.whoami.rule=Host(`whoami.$DOMAINNAME`)
      - traefik.http.routers.whoami.tls=true
      - traefik.http.routers.whoami.middlewares=chain-all-auth

#  watchtower:
#    container_name: watchtower
#    image: containrrr/watchtower
#    restart: unless-stopped
#    networks:
#      - internal
#    environment:
#      - TZ=$TZ
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock

  traefik:
    container_name: traefik
    image: traefik
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - internal
      - proxy
    ports:
      - 80:80
      - 443:443
      - 853:853
      - 53:53
      - 53:53/udp
    environment:
      - TZ=$TZ
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/rules:/rules
      - ./traefik/traefik.yml:/traefik.yml
      - $SHARED:/shared
      - $CONFIG_PATH/traefik/traefik.log:/traefik.log
    labels:
      - com.centurylinklabs.watchtower.enable=false
      - traefik.enable=true
      # HTTP-to-HTTPS
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # HTTP Routers
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.rule=Host(`traefik.$DOMAINNAME`)
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.domains[0].main=$DOMAINNAME
      - traefik.http.routers.traefik.tls.domains[0].sans=*.$DOMAINNAME
      ## Services - API
      - traefik.http.routers.traefik.service=api@internal
      ## Middlewares
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto = https
      - traefik.http.middlewares.secure-headers-frame-options.headers.customFrameOptionsValue="allow-from https:$DOMAINNAME"
      - traefik.http.middlewares.chain-all-auth.chain.middlewares=chain-auth@file,secure-headers-frame-options
      - traefik.http.middlewares.chain-all-no-auth.chain.middlewares=chain-no-auth@file,secure-headers-frame-options
      - traefik.http.routers.traefik.middlewares=chain-all-auth

  openldap:
    container_name: openldap
    image: osixia/openldap
    restart: unless-stopped
    networks:
      - internal
    environment:
      - TZ=$TZ
      - LDAP_DOMAIN=$DOMAINNAME
      - LDAP_BASE_DN=$LDAP_BASE_DN
      - LDAP_ORGANISATION=Dockeria
      - LDAP_ADMIN_PASSWORD=$LDAP_ADMIN_PWD
      - LDAP_TLS=false
      - LDAP_RFC2307BIS_SCHEMA=true
    volumes:
    - $CONFIG_PATH/openldap/runtime:/var/lib/ldap
    - $CONFIG_PATH/openldap/static:/etc/ldap/slapd.d

  phpldapadmin:
    container_name: phpldapadmin
    image: osixia/phpldapadmin
    restart: unless-stopped
    depends_on:
      - openldap
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - PHPLDAPADMIN_LDAP_HOSTS=openldap
      - PHPLDAPADMIN_HTTPS=false
      - PHPLDAPADMIN_TRUST_PROXY_SSL=true
      - PHPLDAPADMIN_LDAP_CLIENT_TLS=false
    volumes:
      - $CONFIG_PATH/phpldapadmin/data:/var/www/phpldapadmin
    labels:
      - traefik.enable=true
      - traefik.http.routers.ldapadmin.entrypoints=https
      - traefik.http.routers.ldapadmin.rule=Host(`pl.$DOMAINNAME`)
      - traefik.http.routers.ldapadmin.tls=true
      - traefik.http.routers.ldapadmin.middlewares=chain-all-auth

  keycloak:
    container_name: keycloak
    image: jboss/keycloak
    restart: unless-stopped
    depends_on:
      - traefik
      - keycloak-db
      - openldap
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - DB_VENDOR=postgres
      - DB_DATABASE=keycloak
      - DB_ADDR=keycloak-db
      - DB_USER=keycloak
      - DB_PASSWORD=$KEYCLOAK_PWD_DB
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=$KEYCLOAK_PWD
      - PROXY_ADDRESS_FORWARDING=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak.entrypoints=https
      - traefik.http.routers.keycloak.rule=Host(`kc.$DOMAINNAME`)
      - traefik.http.routers.keycloak.tls=true
      - traefik.http.services.keycloak.loadbalancer.server.port=8080

  keycloak-db:
    container_name: keycloak-db
    image: library/postgres:12.4
    restart: unless-stopped
    networks:
      - internal
    environment:
      - TZ=$TZ
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=$KEYCLOAK_PWD_DB
    volumes:
      - $CONFIG_PATH/keycloak/database:/var/lib/postgresql/data

  auth:
    container_name: auth
    image: thomseddon/traefik-forward-auth:2
    restart: unless-stopped
    depends_on:
      - traefik
      - keycloak
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - DEFAULT_PROVIDER=oidc
      - PROVIDERS_OIDC_CLIENT_ID=$KEYCLOAK_CLIENT_ID
      - PROVIDERS_OIDC_CLIENT_SECRET=$KEYCLOAK_CLIENT_SEC
      - PROVIDERS_OIDC_ISSUER_URL=https://kc.$DOMAINNAME/auth/realms/$KEYCLOAK_REALM
      - SECRET=$KEYCLOAK_COOKIE_SEC
      - AUTH_HOST=auth.$DOMAINNAME
      - COOKIE_DOMAIN=$DOMAINNAME
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth.entrypoints=https
      - traefik.http.routers.auth.rule=Host(`auth.$DOMAINNAME`)
      - traefik.http.services.auth.loadbalancer.server.port=4181
      - traefik.http.routers.auth.tls=true
      - traefik.http.routers.auth.middlewares=chain-all-auth

  organizr:
    container_name: organizr
    image: organizr/organizr
    restart: unless-stopped
    depends_on:
      - traefik
      - jellyfin
      - qbittorrent
      - jackett
      - nzbhydra2
      - sonarr
      - radarr
      - bazarr
      - ombi
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
    ports:
    - 8085:8085
    volumes:
      - $CONFIG_PATH/organizr/config:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.organizr.entrypoints=https
      - traefik.http.routers.organizr.rule=Host(`$DOMAINNAME`,`www.$DOMAINNAME`)
      - traefik.http.routers.organizr.tls=true
      - traefik.http.routers.organizr.middlewares=chain-all-auth

  jellyfin:
    container_name: jellyfin
    image: jellyfin/jellyfin
    restart: unless-stopped
    depends_on:
      - traefik
    networks:
      - internal
      - proxy
    ports:
      - 8096:8096
    environment:
      - TZ=$TZ
    volumes:
      - $CONFIG_PATH/jellyfin/config:/config
      - $CONFIG_PATH/jellyfin/cache:/cache
      - $STORAGE/media:/media
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.entrypoints=https
      - traefik.http.routers.jellyfin.rule=Host(`jf.$DOMAINNAME`)
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
      - traefik.http.routers.jellyfin.middlewares=chain-all-no-auth

  qbittorrent:
    container_name: qbittorrent
    image: linuxserver/qbittorrent
    restart: unless-stopped
    depends_on:
      - traefik
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - PUID=1000
      - PGID=1000
    volumes:
      - $CONFIG_PATH/qbittorrent/config:/config
      - $STORAGE/downloads:/downloads
    ports:
      - 6881:6881
      - 6881:6881/udp
    labels:
      - traefik.enable=true
      - traefik.http.routers.torrent.entrypoints=https
      - traefik.http.routers.torrent.rule=Host(`qb.$DOMAINNAME`)
      - traefik.http.routers.torrent.tls=true
      - traefik.http.services.torrent.loadbalancer.server.port=8080
      - traefik.http.routers.torrent.middlewares=chain-all-auth

#  tdarr:
#    container_name: tdarr
#    image: haveagitgat/tdarr_aio
#    restart: unless-stopped
#    depends_on:
#      - traefik
#      - qbittorrent
#    networks:
#      - internal
#      - proxy
#    volumes:
#      - $CONFIG_PATH/tdarr/config:/home/Tdarr/Documents/Tdarr
#      - $CONFIG_PATH/tdarr/database:/var/lib/mongodb
#      - $STORAGE/media:/home/Tdarr/Media
#      - /etc/localtime:/etc/localtime:ro
#    labels:
#      - traefik.enable=true
#      - traefik.http.routers.tdarr.entrypoints=https
#      - traefik.http.routers.tdarr.rule=Host(`td.$DOMAINNAME`)
#      - traefik.http.routers.tdarr.tls=true
#      - traefik.http.services.tdarr.loadbalancer.server.port=8265
#      - traefik.http.routers.tdarr.middlewares=chain-all-auth

  jackett:
    container_name: jackett
    image: linuxserver/jackett
    restart: unless-stopped
    depends_on:
      - traefik
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - PUID=1000
      - PGID=1000
    volumes:
      - $CONFIG_PATH/jackett/config:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.jackett.entrypoints=https
      - traefik.http.routers.jackett.rule=Host(`jk.$DOMAINNAME`)
      - traefik.http.routers.jackett.tls=true
      - traefik.http.routers.jackett.middlewares=chain-all-auth

  nzbhydra2:
    container_name: nzbhydra2
    image: linuxserver/nzbhydra2
    restart: unless-stopped
    depends_on:
      - traefik
      - jackett
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - PUID=1000
      - PGID=1000
    volumes:
    - $CONFIG_PATH/nzbhydra2/config:/config
    - $STORAGE/downloads:/downloads
    labels:
      - traefik.enable=true
      - traefik.http.routers.nzbhydra2.entrypoints=https
      - traefik.http.routers.nzbhydra2.rule=Host(`nh.$DOMAINNAME`)
      - traefik.http.routers.nzbhydra2.tls=true
      - traefik.http.routers.nzbhydra2.middlewares=chain-all-auth

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr
    restart: unless-stopped
    depends_on:
      - traefik
      - nzbhydra2
      - qbittorrent
      - jellyfin
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - PUID=1000
      - PGID=1000
      - JELLYFIN_API_KEY=$JELLYFIN_API_KEY_SONARR
    volumes:
      - $CONFIG_PATH/sonarr/config:/config
      - $STORAGE:/mnt/media
      - ./sonarr-radarr/update-jellyfin:/usr/bin/update-jellyfin
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.entrypoints=https
      - traefik.http.routers.sonarr.rule=Host(`sn.$DOMAINNAME`)
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.middlewares=chain-all-auth

  radarr:
    container_name: radarr
    image: linuxserver/radarr:nightly
    restart: unless-stopped
    depends_on:
      - traefik
      - nzbhydra2
      - qbittorrent
      - jellyfin
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - PUID=1000
      - PGID=1000
      - JELLYFIN_API_KEY=$JELLYFIN_API_KEY_RADARR
    volumes:
      - $CONFIG_PATH/radarr/config:/config
      - $STORAGE:/mnt/media
      - ./sonarr-radarr/update-jellyfin:/usr/bin/update-jellyfin
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.entrypoints=https
      - traefik.http.routers.radarr.rule=Host(`rd.$DOMAINNAME`)
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.middlewares=chain-all-auth

  bazarr:
    container_name: bazarr
#    image: linuxserver/bazarr
    build: ./bazarr
    restart: unless-stopped
    depends_on:
      - traefik
      - radarr
      - sonarr
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - PUID=1000
      - PGID=1000
    volumes:
      - $CONFIG_PATH/bazarr/config:/config
      - $STORAGE/media:/mnt/media
      - ./bazarr/subscleaner:/usr/bin/subscleaner
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.entrypoints=https
      - traefik.http.routers.bazarr.rule=Host(`bz.$DOMAINNAME`)
      - traefik.http.routers.bazarr.tls=true
      - traefik.http.routers.bazarr.middlewares=chain-all-auth

  ombi:
    container_name: ombi
    image: linuxserver/ombi
    restart: unless-stopped
    depends_on:
      - traefik
      - jellyfin
      - radarr
      - sonarr
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - PUID=1000
      - PGID=1000
    volumes:
      - $CONFIG_PATH/ombi/config:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.ombi.entrypoints=https
      - traefik.http.routers.ombi.rule=Host(`om.$DOMAINNAME`)
      - traefik.http.routers.ombi.tls=true
      - traefik.http.routers.ombi.middlewares=chain-all-auth

  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: unless-stopped
    depends_on:
      - traefik
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $CONFIG_PATH/portainer/data:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.entrypoints=https
      - traefik.http.routers.portainer.rule=Host(`pt.$DOMAINNAME`)
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.middlewares=chain-all-auth

  lazylibrarian:
    container_name: lazylibrarian
    image: linuxserver/lazylibrarian
    restart: unless-stopped
    depends_on:
      - traefik
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - PUID=1000
      - PGID=1000
      - DOCKER_MODS=linuxserver/mods:lazylibrarian-ffmpeg|linuxserver/calibre-web:calibre
    volumes:
      - $CONFIG_PATH/lazylibrarian/config:/config
      - $STORAGE:/mnt/media
    labels:
      - traefik.enable=true
      - traefik.http.routers.lazylibrarian.entrypoints=https
      - traefik.http.routers.lazylibrarian.rule=Host(`ll.$DOMAINNAME`)
      - traefik.http.routers.lazylibrarian.tls=true
      - traefik.http.routers.lazylibrarian.middlewares=chain-all-auth

  calibre-web:
    container_name: calibre-web
    image: linuxserver/calibre-web
    restart: unless-stopped
    depends_on:
      - traefik
      - lazylibrarian
    networks:
      - internal
      - proxy
    environment:
      - TZ=$TZ
      - PUID=1000
      - PGID=1000
      - DOCKER_MODS=linuxserver/calibre-web:calibre
    volumes:
      - ./calibre-web/imagemagick/policy.xml:/etc/Imagemagick-6/policy.xml
      - $CONFIG_PATH/calibre-web/config:/config
      - $STORAGE/media/books/calibre:/books
    labels:
      - traefik.enable=true
      - traefik.http.routers.calibre-web.entrypoints=https
      - traefik.http.routers.calibre-web.rule=Host(`cw.$DOMAINNAME`)
      - traefik.http.routers.calibre-web.tls=true
      - traefik.http.routers.calibre-web.middlewares=chain-all-auth

  pihole:
    container_name: pihole
    image: jacklul/pihole:latest
    restart: unless-stopped
    depends_on: 
      - traefik
    networks:
      - internal
    environment: 
      PUID: '1000'
      PGID: '1000'
      TZ: $TZ
      WEBPASSWORD: $PIHOLE_PWD
      VIRTUAL_HOST: pi.$DOMAINNAME
    volumes:
      - $CONFIG_PATH/pihole:/etc/pihole
      - $CONFIG_PATH/dnsmasq.d:/etc/dnsmasq.d
      - $CONFIG_PATH/pihole-updatelists:/etc/pihole-updatelists
    dns:
      - 127.0.0.1
      - 8.8.8.8
    labels: 
      - traefik.enable=true
      - traefik.http.routers.pihole.entrypoints=https
      - traefik.http.routers.pihole.rule=Host(`pi.$DOMAINNAME`)
      - traefik.http.routers.pihole.tls=true
      # - traefik.http.routers.pihole.middlewares=chain-all-auth
      - traefik.http.services.pihole.loadbalancer.server.port=80

      - traefik.tcp.routers.dnsovertls.rule=HostSNI(`pi.$DOMAINNAME`)
      - traefik.tcp.routers.dnsovertls.entrypoints=dnsovertls
      - traefik.tcp.routers.dnsovertls.tls=true
      - traefik.tcp.routers.dnsovertls.service=pihole

      - traefik.tcp.routers.dns.rule=HostSNI(`pi.$DOMAINNAME)
      - traefik.tcp.routers.dns.entrypoints=dns
      - traefik.tcp.routers.dns.service=pihole

      - traefik.tcp.services.pihole.loadbalancer.server.port=53

      - traefik.udp.routers.udpdns.entrypoints=udpdns
      - traefik.udp.routers.udpdns.service=pihole
      - traefik.udp.services.pihole.loadbalancer.server.port=53

#  bitwarden:
#    container_name: bitwarden
#    image: bitwardenrs/server
#    restart: unless-stopped
#    depends_on:
#      - traefik
#    networks:
#      - internal
#      - proxy
#    environment:
#      - TZ=$TZ
#      - DOMAIN=https://bw.$DOMAINNAME
#      - WEBSOCKET_ENABLED=true
#      - ADMIN_TOKEN=$BITWARDEN_ADMIN_TOK
#      - SIGNUPS_ALLOWED=false
#   volumes:
#     - $CONFIG_PATH/bitwarden:/data
#   labels:
#     - traefik.enable=true
#     - traefik.http.routers.bitwarden.rule=Host(`bw.$DOMAINNAME`)
#     - traefik.http.routers.bitwarden.tls=true
#     - traefik.http.routers.bitwarden.service=bitwarden
#     - traefik.http.services.bitwarden.loadbalancer.server.port=80
#      - traefik.http.routers.bitwarden.middlewares=chain-all-auth
#     - traefik.http.routers.bitwarden-ws.rule=(Host(`bw.$DOMAINNAME`) && Path(`/notifications/hub`))
#     - traefik.http.routers.bitwarden-ws.tls=true
#     - traefik.http.routers.bitwarden-ws.service=bitwarden-ws
#     - traefik.http.services.bitwarden-ws.loadbalancer.server.port=3012

#  bitwarden-ldap:
#    container_name: bitwarden-ldap
#    image: vividboarder/bitwarden_rs_ldap
#    restart: unless-stopped
#    depends_on:
#      - openldap
#      - bitwarden
#    networks:
#      - internal
#    environment:
#      - RUST_BACKTRACE=1
#    volumes:
#      - $CONFIG_PATH/bitwarden-ldap/config.toml:/usr/src/bitwarden_rs_ldap/config.toml

#   kanboard:
#     container_name: kanboard
#     image: kanboard/kanboard
#     restart: unless-stopped
#     depends_on:
#       - traefik
#     networks:
#       - internal
#       - proxy
#     environment:
#       - LDAP_AUTH=true
#       - LDAP_BIND_TYPE=proxy
#       - LDAP_USERNAME=cn=admin,$LDAP_BASE_DN
#       - LDAP_PASSWORD=$LDAP_ADMIN_PWD
#       - LDAP_SERVER=openldap
#       - LDAP_USER_BASE_DN=ou=People,$LDAP_BASE_DN
#       - LDAP_USER_FILTER=uid=%s
# #      - REVERSE_PROXY_AUTH=true
# #      - REVERSE_PROXY_EMAIL_HEADER=HTTP_X-Forwarded-User
# #      - REVERSE_PROXY_DEFAULT_ADMIN=ajnikitins
#       - PLUGIN_INSTALLER=true
#     volumes:
#       - $CONFIG_PATH/kanboard/:/var/www/app/data
#       - $CONFIG_PATH/kanboard/plugins:/var/www/app/plugins
#     labels:
#       - traefik.enable=true
#       - traefik.http.routers.kanboard.entrypoints=https
#       - traefik.http.routers.kanboard.rule=Host(`kb.$DOMAINNAME`)
#       - traefik.http.routers.kanboard.tls=true
#       - traefik.http.routers.kanboard.middlewares=chain-all-auth
